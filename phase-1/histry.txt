            "type": "network",
            "path": "/var/run/netns/9d53f870-f134-4b3d-9f8f-f6dd4d1c15b9"
          },
          {
            "type": "ipc",
            "path": "/var/run/ipcns/9d53f870-f134-4b3d-9f8f-f6dd4d1c15b9"
          },
          {
            "type": "uts",
            "path": "/var/run/utsns/9d53f870-f134-4b3d-9f8f-f6dd4d1c15b9"
          },
          {
            "type": "mount"
          },
          {
            "type": "cgroup"
          }
        ],
        "maskedPaths": [
          "/proc/asound",
          "/proc/acpi",
          "/proc/kcore",
          "/proc/keys",
          "/proc/latency_stats",
          "/proc/timer_list",
          "/proc/timer_stats",
          "/proc/sched_debug",
          "/proc/scsi",
          "/sys/firmware",
          "/sys/devices/virtual/powercap"
        ],
        "readonlyPaths": [
          "/proc/bus",
          "/proc/fs",
          "/proc/irq",
          "/proc/sys",
          "/proc/sysrq-trigger"
        ]
      }
    },
    "privileged": false
  }
}
root@minikube:/home# ps aux | grep redis
root        1375  0.0  0.0  82740  2692 ?        Ssl  13:33   0:00 /usr/bin/conmon -b /run/containers/storage/overlay-containers/7a0a79aae4aea1d954fd02595a38b436ee3f3ab9c4633c8033b035cee390ec3e/userdata -c 7a0a79aae4aea1d954fd02595a38b436ee3f3ab9c4633c8033b035cee390ec3e --exit-dir /var/run/crio/exits -l /var/log/pods/default_redis-p_786c3f87-560b-4d7a-b346-fd663c301a54/redis-c/1.log --log-level info -n k8s_redis-c_redis-p_default_786c3f87-560b-4d7a-b346-fd663c301a54_1 -P /run/containers/storage/overlay-containers/7a0a79aae4aea1d954fd02595a38b436ee3f3ab9c4633c8033b035cee390ec3e/userdata/conmon-pidfile -p /run/containers/storage/overlay-containers/7a0a79aae4aea1d954fd02595a38b436ee3f3ab9c4633c8033b035cee390ec3e/userdata/pidfile --persist-dir /var/lib/containers/storage/overlay-containers/7a0a79aae4aea1d954fd02595a38b436ee3f3ab9c4633c8033b035cee390ec3e/userdata -r /usr/lib/cri-o-runc/sbin/runc --runtime-arg --root=/run/runc --socket-dir-path /var/run/crio --syslog -u 7a0a79aae4aea1d954fd02595a38b436ee3f3ab9c4633c8033b035cee390ec3e
999         1388  0.2  0.3 133632 14960 ?        Ssl  13:33   0:10 redis-server *:6379
root        7992  0.0  0.0   3472  2032 pts/3    R+   14:38   0:00 grep --color=auto redis
root@minikube:/home# 
root@minikube:/home# 
root@minikube:/home# ps aux | grep redis
root        1375  0.0  0.0  82740  2692 ?        Ssl  13:33   0:00 /usr/bin/conmon -b /run/containers/storage/overlay-containers/7a0a79aae4aea1d954fd02595a38b436ee3f3ab9c4633c8033b035cee390ec3e/userdata -c 7a0a79aae4aea1d954fd02595a38b436ee3f3ab9c4633c8033b035cee390ec3e --exit-dir /var/run/crio/exits -l /var/log/pods/default_redis-p_786c3f87-560b-4d7a-b346-fd663c301a54/redis-c/1.log --log-level info -n k8s_redis-c_redis-p_default_786c3f87-560b-4d7a-b346-fd663c301a54_1 -P /run/containers/storage/overlay-containers/7a0a79aae4aea1d954fd02595a38b436ee3f3ab9c4633c8033b035cee390ec3e/userdata/conmon-pidfile -p /run/containers/storage/overlay-containers/7a0a79aae4aea1d954fd02595a38b436ee3f3ab9c4633c8033b035cee390ec3e/userdata/pidfile --persist-dir /var/lib/containers/storage/overlay-containers/7a0a79aae4aea1d954fd02595a38b436ee3f3ab9c4633c8033b035cee390ec3e/userdata -r /usr/lib/cri-o-runc/sbin/runc --runtime-arg --root=/run/runc --socket-dir-path /var/run/crio --syslog -u 7a0a79aae4aea1d954fd02595a38b436ee3f3ab9c4633c8033b035cee390ec3e
999         1388  0.2  0.3 133632 14960 ?        Ssl  13:33   0:10 redis-server *:6379
root        7994  0.0  0.0   3472  1968 pts/3    S+   14:38   0:00 grep --color=auto redis
root@minikube:/home# 
root@minikube:/home# 
root@minikube:/home# 
root@minikube:/home# sudo criu dump -t 1388 -D /tmp/checkpoint/ -j -o dump.log
Error (criu/image.c:567): Can't open dir /tmp/checkpoint/: No such file or directory
Error (criu/crtools.c:240): Couldn't open image dir /tmp/checkpoint/
root@minikube:/home# sudo mkdir -p /tmp/checkpoint/
root@minikube:/home# sudo criu dump -t 1388 -D /tmp/checkpoint/ -j -o dump.log
root@minikube:/home# cd /tmp/checkpoint/
root@minikube:/tmp/checkpoint# ls
dump.log
root@minikube:/tmp/checkpoint# cd dump.log 
bash: cd: dump.log: Not a directory
root@minikube:/tmp/checkpoint# cat dump.log 
Error (criu/libnetlink.c:54): -95 reported by netlink: Operation not supported
Error (criu/net.c:3800): net: Unable to create a veth pair: -95
Warn  (criu/net.c:3826): net: NSID isn't reported for network links
Error (criu/mount.c:1088): mnt: Mount 756 ./run/.containerenv (master_id: 40 shared_id: 0) has unreachable sharing. Try --enable-external-masters.
Error (criu/cr-dump.c:2098): Dumping FAILED.
root@minikube:/tmp/checkpoint# sudo criu dump -t 1388 -D /tmp/checkpoint/ -j -o dump.log --tcp-established --empty-ns net --enable-external-masters
root@minikube:/tmp/checkpoint# cat dump.log 
Error (criu/mount.c:1088): mnt: Mount 756 ./run/.containerenv (master_id: 40 shared_id: 0) has unreachable sharing. Try --enable-external-masters.
Error (criu/cr-dump.c:2098): Dumping FAILED.
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# cat dump.log 
Error (criu/mount.c:1088): mnt: Mount 756 ./run/.containerenv (master_id: 40 shared_id: 0) has unreachable sharing. Try --enable-external-masters.
Error (criu/cr-dump.c:2098): Dumping FAILED.
root@minikube:/tmp/checkpoint# sudo cat /proc/1388/mounts
overlay / overlay rw,relatime,lowerdir=/var/lib/containers/storage/overlay/l/FXY5MVF5SIVRSYJXPRDKIFYRPU:/var/lib/containers/storage/overlay/l/WPB7PIIBCTX2D6ZIYPLAMZ5IQV:/var/lib/containers/storage/overlay/l/EMLLMX4LPTNBPWQXEL4R4P5HWP:/var/lib/containers/storage/overlay/l/TX73GRYPUBTWX3O4PYVPBJ3IAY:/var/lib/containers/storage/overlay/l/BPJUFMKS2YUM5NPXXHPNXRBJUH:/var/lib/containers/storage/overlay/l/CFPASF3AGEREKUYTTXUJMBL2MH:/var/lib/containers/storage/overlay/l/Z2SCHZKJK64GZTWQMIOJBVT346:/var/lib/containers/storage/overlay/l/O7JTV7EZ347AVWBU4TX62CYJYO,upperdir=/var/lib/containers/storage/overlay/f23440719c672865b1205bde0d7a99e7f46bae506a71c00258fe2ecbab8b3b55/diff,workdir=/var/lib/containers/storage/overlay/f23440719c672865b1205bde0d7a99e7f46bae506a71c00258fe2ecbab8b3b55/work,uuid=on,volatile 0 0
proc /proc proc rw,nosuid,nodev,noexec,relatime 0 0
tmpfs /dev tmpfs rw,nosuid,size=65536k,mode=755 0 0
devpts /dev/pts devpts rw,nosuid,noexec,relatime,gid=5,mode=620,ptmxmode=666 0 0
mqueue /dev/mqueue mqueue rw,nosuid,nodev,noexec,relatime 0 0
sysfs /sys sysfs ro,nosuid,nodev,noexec,relatime 0 0
cgroup /sys/fs/cgroup cgroup2 ro,nosuid,nodev,noexec,relatime 0 0
shm /dev/shm tmpfs rw,nosuid,nodev,noexec,relatime,size=65536k 0 0
tmpfs /etc/resolv.conf tmpfs rw,nosuid,nodev,noexec,relatime,mode=755 0 0
tmpfs /etc/hostname tmpfs rw,nosuid,nodev,noexec,relatime,mode=755 0 0
tmpfs /run/.containerenv tmpfs rw,nosuid,nodev,noexec,relatime,mode=755 0 0
/dev/vda1 /etc/hosts ext4 rw,relatime,discard 0 0
/dev/vda1 /dev/termination-log ext4 rw,relatime,discard 0 0
tmpfs /run/secrets/kubernetes.io/serviceaccount tmpfs ro,relatime,size=4008620k,noswap 0 0
proc /proc/bus proc ro,nosuid,nodev,noexec,relatime 0 0
proc /proc/fs proc ro,nosuid,nodev,noexec,relatime 0 0
proc /proc/irq proc ro,nosuid,nodev,noexec,relatime 0 0
proc /proc/sys proc ro,nosuid,nodev,noexec,relatime 0 0
proc /proc/sysrq-trigger proc ro,nosuid,nodev,noexec,relatime 0 0
tmpfs /proc/acpi tmpfs ro,relatime 0 0
tmpfs /proc/kcore tmpfs rw,nosuid,size=65536k,mode=755 0 0
tmpfs /proc/keys tmpfs rw,nosuid,size=65536k,mode=755 0 0
tmpfs /proc/timer_list tmpfs rw,nosuid,size=65536k,mode=755 0 0
tmpfs /sys/firmware tmpfs ro,relatime 0 0
root@minikube:/tmp/checkpoint# sudo criu dump -t 1388 -D /tmp/checkpoint/ -j -o dump.log --empty-ns all --enable-external-masters
Error (criu/config.c:972): Unsupported empty namespace: all
root@minikube:/tmp/checkpoint# sudo criu dump -t 1388 -D /tmp/checkpoint/ -j -o dump.log --empty-ns net --empty-ns mnt --enable-external-masters
Error (criu/config.c:972): Unsupported empty namespace: mnt
root@minikube:/tmp/checkpoint# sudo criu dump -t 1388 -D /tmp/checkpoint/ -j -o dump.log --empty-ns net --empty-ns mnt --empty-ns ipc --empty-ns pid --enable-external-masters
Error (criu/config.c:972): Unsupported empty namespace: mnt
root@minikube:/tmp/checkpoint# cat dump.log 
Error (criu/mount.c:1088): mnt: Mount 756 ./run/.containerenv (master_id: 40 shared_id: 0) has unreachable sharing. Try --enable-external-masters.
Error (criu/cr-dump.c:2098): Dumping FAILED.
root@minikube:/tmp/checkpoint# sudo criu dump -t 1388 -D /tmp/checkpoint/ -j -o dump.log --empty-ns net --empty-ns ipc --empty-ns pid --enable-external-masters
Error (criu/config.c:972): Unsupported empty namespace: ipc
root@minikube:/tmp/checkpoint# sudo criu dump -t 1388 -D /tmp/checkpoint/ -j -o dump.log --empty-ns net --empty-ns pid --enable-external-masters
Error (criu/config.c:972): Unsupported empty namespace: pid
root@minikube:/tmp/checkpoint# sudo criu dump -t 1388 -D /tmp/checkpoint/ -j -o dump.log --empty-ns net --enable-external-masters
root@minikube:/tmp/checkpoint# ls
dump.log
root@minikube:/tmp/checkpoint# cat dump.log 
Error (criu/mount.c:1088): mnt: Mount 756 ./run/.containerenv (master_id: 40 shared_id: 0) has unreachable sharing. Try --enable-external-masters.
Error (criu/cr-dump.c:2098): Dumping FAILED.
root@minikube:/tmp/checkpoint# sudo criu dump -t 1388 -D /tmp/checkpoint/ -j -o dump.log --empty-ns net --enable-external-masters
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# 
root@minikube:/tmp/checkpoint# sudo criu dump -t 1388 -D /tmp/checkpoint/ -j -o dump.log --empty-ns net --enable-external-masters
root@minikube:/tmp/checkpoint# cat dump.log 
Error (criu/mount.c:1088): mnt: Mount 756 ./run/.containerenv (master_id: 40 shared_id: 0) has unreachable sharing. Try --enable-external-masters.
Error (criu/cr-dump.c:2098): Dumping FAILED.
root@minikube:/tmp/checkpoint# sudo criu dump -t 1388 -D /tmp/checkpoint/ -j -o dump.log --empty-ns net --enable-external-masters --external mount[./run/.containerenv]
root@minikube:/tmp/checkpoint# cat dump.log 
Error (criu/mount.c:1088): mnt: Mount 756 ./run/.containerenv (master_id: 40 shared_id: 0) has unreachable sharing. Try --enable-external-masters.
Error (criu/cr-dump.c:2098): Dumping FAILED.
root@minikube:/tmp/checkpoint# cd /etc/   
root@minikube:/etc# ls
PackageKit                     cloud           deluser.conf  gshadow-        issue          logcheck        network                   pm          rc5.d                 shadow             sudoers      update-motd.d
X11                            cni             depmod.d      gss             issue.net      login.defs      networks                  polkit-1    rc6.d                 shadow-            sudoers.d    vim
adduser.conf                   containerd      docker        host.conf       kernel         logrotate.d     nfs.conf                  profile     rcS.d                 shells             sysconfig    xattr.conf
alternatives                   containers      dpkg          hostname        keyutils       lsb-release     nfs.conf.d                profile.d   request-key.conf      skel               sysctl.conf  xdg
apt                            crictl.yaml     e2scrub.conf  hosts           kubernetes     machine-id      nsswitch.conf             protocols   request-key.d         ssh                sysctl.d
bash.bashrc                    crio            environment   hosts.allow     ld.so.cache    mime.types      nvidia-container-runtime  python3     resolv.conf           ssl                systemd
bindresvport.blacklist         cron.d          ethertypes    hosts.deny      ld.so.conf     mke2fs.conf     opt                       python3.10  resolv.conf.original  subgid             terminfo
binfmt.d                       cron.daily      fstab         idmapd.conf     ld.so.conf.d   modprobe.d      os-release                rc0.d       rmt                   subgid-            timezone
buildkit                       dbus-1          gai.conf      init.d          legal          modules         pam.conf                  rc1.d       rpc                   subuid             tmpfiles.d
ca-certificates                debconf.conf    group         inputrc         libaudit.conf  modules-load.d  pam.d                     rc2.d       security              subuid-            ucf.conf
ca-certificates.conf           debian_version  group-        insserv.conf.d  libnl-3        mtab            passwd                    rc3.d       selinux               sudo.conf          udev
ca-certificates.conf.dpkg-old  default         gshadow       iproute2        localtime      netconfig       passwd-                   rc4.d       services              sudo_logsrvd.conf  ufw
root@minikube:/etc# cd cr
crictl.yaml  crio/        cron.d/      cron.daily/  
root@minikube:/etc# cd cr
crictl.yaml  crio/        cron.d/      cron.daily/  
root@minikube:/etc# cd crio/
root@minikube:/etc/crio# ls
crio.conf  crio.conf.d  policies
root@minikube:/etc/crio# cd crio.conf
bash: cd: crio.conf: Not a directory
root@minikube:/etc/crio# cd crio.conf.d/
root@minikube:/etc/crio/crio.conf.d# ls
01-crio-runc.conf  02-crio.conf
root@minikube:/etc/crio/crio.conf.d# cd 02-crio.conf 
bash: cd: 02-crio.conf: Not a directory
root@minikube:/etc/crio/crio.conf.d# cat 02-crio.conf 
[crio.image]
pause_image = "registry.k8s.io/pause:3.10"

[crio.network]
# cni_default_network = ""

[crio.runtime]
cgroup_manager = "cgroupfs"
conmon_cgroup = "pod"
default_sysctls = [
  "net.ipv4.ip_unprivileged_port_start=0",
]
root@minikube:/etc/crio/crio.conf.d# pwd
/etc/crio/crio.conf.d
root@minikube:/etc/crio/crio.conf.d# ls 
01-crio-runc.conf  02-crio.conf
root@minikube:/etc/crio/crio.conf.d# cat 01-crio-runc.conf 
[crio.runtime.runtimes.runc]
runtime_path = "/usr/lib/cri-o-runc/sbin/runc"
runtime_type = "oci"
runtime_root = "/run/runc"
root@minikube:/etc/crio/crio.conf.d# cd ..
root@minikube:/etc/crio# ls
crio.conf  crio.conf.d  policies
root@minikube:/etc/crio# cat crio.conf
# The CRI-O configuration file specifies all of the available configuration
# options and command-line flags for the crio(8) OCI Kubernetes Container Runtime
# daemon, but in a TOML format that can be more easily modified and versioned.
#
# Please refer to crio.conf(5) for details of all configuration options.

# CRI-O supports partial configuration reload during runtime, which can be
# done by sending SIGHUP to the running process. Currently supported options
# are explicitly mentioned with: 'This option supports live configuration
# reload'.

# CRI-O reads its storage defaults from the containers-storage.conf(5) file
# located at /etc/containers/storage.conf. Modify this storage configuration if
# you want to change the system's defaults. If you want to modify storage just
# for CRI-O, you can change the storage configuration options here.
[crio]

# Path to the "root directory". CRI-O stores all of its data, including
# containers images, in this directory.
# root = "/home/abuild/.local/share/containers/storage"

# Path to the "run directory". CRI-O stores all of its state in this directory.
# runroot = "/tmp/containers-user-399/containers"

# Storage driver used to manage the storage of images and containers. Please
# refer to containers-storage.conf(5) to see all available storage drivers.
# storage_driver = "overlay"

# List to pass options to the storage driver. Please refer to
# containers-storage.conf(5) to see all available storage options.
# storage_option = [
# ]

# The default log directory where all logs will go unless directly specified by
# the kubelet. The log directory specified must be an absolute directory.
# log_dir = "/var/log/crio/pods"

# Location for CRI-O to lay down the temporary version file.
# It is used to check if crio wipe should wipe containers, which should
# always happen on a node reboot
# version_file = "/var/run/crio/version"

# Location for CRI-O to lay down the persistent version file.
# It is used to check if crio wipe should wipe images, which should
# only happen when CRI-O has been upgraded
# version_file_persist = ""

# InternalWipe is whether CRI-O should wipe containers and images after a reboot when the server starts.
# If set to false, one must use the external command 'crio wipe' to wipe the containers and images in these situations.
# internal_wipe = true

# InternalRepair is whether CRI-O should check if the container and image storage was corrupted after a sudden restart.
# If it was, CRI-O also attempts to repair the storage.
# internal_repair = false

# Location for CRI-O to lay down the clean shutdown file.
# It is used to check whether crio had time to sync before shutting down.
# If not found, crio wipe will clear the storage directory.
# clean_shutdown_file = "/var/lib/crio/clean.shutdown"

# The crio.api table contains settings for the kubelet/gRPC interface.
[crio.api]

# Path to AF_LOCAL socket on which CRI-O will listen.
# listen = "/var/run/crio/crio.sock"

# IP address on which the stream server will listen.
# stream_address = "127.0.0.1"

# The port on which the stream server will listen. If the port is set to "0", then
# CRI-O will allocate a random free port number.
# stream_port = "0"

# Enable encrypted TLS transport of the stream server.
# stream_enable_tls = false

# Length of time until open streams terminate due to lack of activity
# stream_idle_timeout = ""

# Path to the x509 certificate file used to serve the encrypted stream. This
# file can change, and CRI-O will automatically pick up the changes within 5
# minutes.
# stream_tls_cert = ""

# Path to the key file used to serve the encrypted stream. This file can
# change and CRI-O will automatically pick up the changes within 5 minutes.
# stream_tls_key = ""

# Path to the x509 CA(s) file used to verify and authenticate client
# communication with the encrypted stream. This file can change and CRI-O will
# automatically pick up the changes within 5 minutes.
# stream_tls_ca = ""

# Maximum grpc send message size in bytes. If not set or <=0, then CRI-O will default to 80 * 1024 * 1024.
# grpc_max_send_msg_size = 83886080

# Maximum grpc receive message size. If not set or <= 0, then CRI-O will default to 80 * 1024 * 1024.
# grpc_max_recv_msg_size = 83886080

enable_criu_support = true
# The crio.runtime table contains settings pertaining to the OCI runtime used
# and options for how to set up and manage the OCI runtime.
[crio.runtime]

# A list of ulimits to be set in containers by default, specified as
# "<ulimit name>=<soft limit>:<hard limit>", for example:
# "nofile=1024:2048"
# If nothing is set here, settings will be inherited from the CRI-O daemon
# default_ulimits = [
# ]

# If true, the runtime will not use pivot_root, but instead use MS_MOVE.
# no_pivot = false

# decryption_keys_path is the path where the keys required for
# image decryption are stored. This option supports live configuration reload.
# decryption_keys_path = "/etc/crio/keys/"

# Path to the conmon binary, used for monitoring the OCI runtime.
# Will be searched for using $PATH if empty.
# This option is currently deprecated, and will be replaced with RuntimeHandler.MonitorEnv.
# conmon = ""

# Cgroup setting for conmon
# This option is currently deprecated, and will be replaced with RuntimeHandler.MonitorCgroup.
# conmon_cgroup = ""

# Environment variable list for the conmon process, used for passing necessary
# environment variables to conmon or the runtime.
# This option is currently deprecated, and will be replaced with RuntimeHandler.MonitorEnv.
# conmon_env = [
# ]

# Additional environment variables to set for all the
# containers. These are overridden if set in the
# container image spec or in the container runtime configuration.
# default_env = [
# ]

# If true, SELinux will be used for pod separation on the host.
# selinux = false

# Path to the seccomp.json profile which is used as the default seccomp profile
# for the runtime. If not specified, then the internal default seccomp profile
# will be used. This option supports live configuration reload.
# seccomp_profile = ""

# Changes the meaning of an empty seccomp profile. By default
# (and according to CRI spec), an empty profile means unconfined.
# This option tells CRI-O to treat an empty profile as the default profile,
# which might increase security.
# This option is currently deprecated,
# and will be replaced by the SeccompDefault FeatureGate in Kubernetes.
# seccomp_use_default_when_empty = true

# Used to change the name of the default AppArmor profile of CRI-O. The default
# profile name is "crio-default". This profile only takes effect if the user
# does not specify a profile via the Kubernetes Pod's metadata annotation. If
# the profile is set to "unconfined", then this equals to disabling AppArmor.
# This option supports live configuration reload.
# apparmor_profile = "crio-default"

# Path to the blockio class configuration file for configuring
# the cgroup blockio controller.
# blockio_config_file = ""

# Used to change irqbalance service config file path which is used for configuring
# irqbalance daemon.
# irqbalance_config_file = "/etc/sysconfig/irqbalance"

# irqbalance_config_restore_file allows to set a cpu mask CRI-O should
# restore as irqbalance config at startup. Set to empty string to disable this flow entirely.
# By default, CRI-O manages the irqbalance configuration to enable dynamic IRQ pinning.
# irqbalance_config_restore_file = "/etc/sysconfig/orig_irq_banned_cpus"

# Path to the RDT configuration file for configuring the resctrl pseudo-filesystem.
# This option supports live configuration reload.
# rdt_config_file = ""

# Cgroup management implementation used for the runtime.
# cgroup_manager = "systemd"

# Specify whether the image pull must be performed in a separate cgroup.
# separate_pull_cgroup = ""

# List of default capabilities for containers. If it is empty or commented out,
# only the capabilities defined in the containers json file by the user/kube
# will be added.
# default_capabilities = [
#       "CHOWN",
#       "DAC_OVERRIDE",
#       "FSETID",
#       "FOWNER",
#       "SETGID",
#       "SETUID",
#       "SETPCAP",
#       "NET_BIND_SERVICE",
#       "KILL",
# ]

# Add capabilities to the inheritable set, as well as the default group of permitted, bounding and effective.
# If capabilities are expected to work for non-root users, this option should be set.
# add_inheritable_capabilities = false

# List of default sysctls. If it is empty or commented out, only the sysctls
# defined in the container json file by the user/kube will be added.
# default_sysctls = [
# ]

# List of devices on the host that a
# user can specify with the "io.kubernetes.cri-o.Devices" allowed annotation.
# allowed_devices = [
#       "/dev/fuse",
# ]

# List of additional devices. specified as
# "<device-on-host>:<device-on-container>:<permissions>", for example: "--device=/dev/sdc:/dev/xvdc:rwm".
# If it is empty or commented out, only the devices
# defined in the container json file by the user/kube will be added.
# additional_devices = [
# ]

# List of directories to scan for CDI Spec files.
# cdi_spec_dirs = [
#       "/etc/cdi",
#       "/var/run/cdi",
# ]

# Change the default behavior of setting container devices uid/gid from CRI's
# SecurityContext (RunAsUser/RunAsGroup) instead of taking host's uid/gid.
# Defaults to false.
# device_ownership_from_security_context = false

# Path to OCI hooks directories for automatically executed hooks. If one of the
# directories does not exist, then CRI-O will automatically skip them.
# hooks_dir = [
#       "/usr/share/containers/oci/hooks.d",
# ]

# Path to the file specifying the defaults mounts for each container. The
# format of the config is /SRC:/DST, one mount per line. Notice that CRI-O reads
# its default mounts from the following two files:
#
#   1) /etc/containers/mounts.conf (i.e., default_mounts_file): This is the
#      override file, where users can either add in their own default mounts, or
#      override the default mounts shipped with the package.
#
#   2) /usr/share/containers/mounts.conf: This is the default file read for
#      mounts. If you want CRI-O to read from a different, specific mounts file,
#      you can change the default_mounts_file. Note, if this is done, CRI-O will
#      only add mounts it finds in this file.
#
# default_mounts_file = ""

# Maximum number of processes allowed in a container.
# This option is deprecated. The Kubelet flag '--pod-pids-limit' should be used instead.
# pids_limit = 0

# Maximum sized allowed for the container log file. Negative numbers indicate
# that no size limit is imposed. If it is positive, it must be >= 8192 to
# match/exceed conmon's read buffer. The file is truncated and re-opened so the
# limit is never exceeded. This option is deprecated. The Kubelet flag '--container-log-max-size' should be used instead.
# log_size_max = -1

# Whether container output should be logged to journald in addition to the kubernetes log file
# log_to_journald = false

# Path to directory in which container exit files are written to by conmon.
# container_exits_dir = "/var/run/crio/exits"

# Path to directory for container attach sockets.
# container_attach_socket_dir = "/var/run/crio"

# The prefix to use for the source of the bind mounts.
# bind_mount_prefix = ""

# If set to true, all containers will run in read-only mode.
# read_only = false

# Changes the verbosity of the logs based on the level it is set to. Options
# are fatal, panic, error, warn, info, debug and trace. This option supports
# live configuration reload.
# log_level = "info"

# Filter the log messages by the provided regular expression.
# This option supports live configuration reload.
# log_filter = ""

# The UID mappings for the user namespace of each container. A range is
# specified in the form containerUID:HostUID:Size. Multiple ranges must be
# separated by comma.
# uid_mappings = ""

# The GID mappings for the user namespace of each container. A range is
# specified in the form containerGID:HostGID:Size. Multiple ranges must be
# separated by comma.
# gid_mappings = ""

# If set, CRI-O will reject any attempt to map host UIDs below this value
# into user namespaces.  A negative value indicates that no minimum is set,
# so specifying mappings will only be allowed for pods that run as UID 0.
# minimum_mappable_uid = -1

# If set, CRI-O will reject any attempt to map host GIDs below this value
# into user namespaces.  A negative value indicates that no minimum is set,
# so specifying mappings will only be allowed for pods that run as UID 0.
# minimum_mappable_gid = -1

# The minimal amount of time in seconds to wait before issuing a timeout
# regarding the proper termination of the container. The lowest possible
# value is 30s, whereas lower values are not considered by CRI-O.
# ctr_stop_timeout = 30

# drop_infra_ctr determines whether CRI-O drops the infra container
# when a pod does not have a private PID namespace, and does not use
# a kernel separating runtime (like kata).
# It requires manage_ns_lifecycle to be true.
# drop_infra_ctr = true

# infra_ctr_cpuset determines what CPUs will be used to run infra containers.
# You can use linux CPU list format to specify desired CPUs.
# To get better isolation for guaranteed pods, set this parameter to be equal to kubelet reserved-cpus.
# infra_ctr_cpuset = ""

# shared_cpuset  determines the CPU set which is allowed to be shared between guaranteed containers,
# regardless of, and in addition to, the exclusiveness of their CPUs.
# This field is optional and would not be used if not specified.
# You can specify CPUs in the Linux CPU list format.
# shared_cpuset = ""

# The directory where the state of the managed namespaces gets tracked.
# Only used when manage_ns_lifecycle is true.
# namespaces_dir = "/var/run"

# pinns_path is the path to find the pinns binary, which is needed to manage namespace lifecycle
# pinns_path = ""

# Globally enable/disable CRIU support which is necessary to
# checkpoint and restore container or pods (even if CRIU is found in $PATH).
# enable_criu_support = false

# Enable/disable the generation of the container,
# sandbox lifecycle events to be sent to the Kubelet to optimize the PLEG
# enable_pod_events = false

# default_runtime is the _name_ of the OCI runtime to be used as the default.
# default_runtime is the _name_ of the OCI runtime to be used as the default.
# The name is matched against the runtimes map below.
# default_runtime = "runc"

# A list of paths that, when absent from the host,
# will cause a container creation to fail (as opposed to the current behavior being created as a directory).
# This option is to protect from source locations whose existence as a directory could jeopardize the health of the node, and whose
# creation as a file is not desired either.
# An example is /etc/hostname, which will cause failures on reboot if it's created as a directory, but often doesn't exist because
# the hostname is being managed dynamically.
# absent_mount_sources_to_reject = [
# ]

# The "crio.runtime.runtimes" table defines a list of OCI compatible runtimes.
# The runtime to use is picked based on the runtime handler provided by the CRI.
# If no runtime handler is provided, the "default_runtime" will be used.
# Each entry in the table should follow the format:
#
# [crio.runtime.runtimes.runtime-handler]
# runtime_path = "/path/to/the/executable"
# runtime_type = "oci"
# runtime_root = "/path/to/the/root"
# monitor_path = "/path/to/container/monitor"
# monitor_cgroup = "/cgroup/path"
# monitor_exec_cgroup = "/cgroup/path"
# monitor_env = []
# privileged_without_host_devices = false
# allowed_annotations = []
# platform_runtime_paths = { "os/arch" = "/path/to/binary" }
# Where:
# - runtime-handler: Name used to identify the runtime.
# - runtime_path (optional, string): Absolute path to the runtime executable in
#   the host filesystem. If omitted, the runtime-handler identifier should match
#   the runtime executable name, and the runtime executable should be placed
#   in $PATH.
# - runtime_type (optional, string): Type of runtime, one of: "oci", "vm". If
#   omitted, an "oci" runtime is assumed.
# - runtime_root (optional, string): Root directory for storage of containers
#   state.
# - runtime_config_path (optional, string): the path for the runtime configuration
#   file. This can only be used with when using the VM runtime_type.
# - privileged_without_host_devices (optional, bool): an option for restricting
#   host devices from being passed to privileged containers.
# - allowed_annotations (optional, array of strings): an option for specifying
#   a list of experimental annotations that this runtime handler is allowed to process.
#   The currently recognized values are:
#   "io.kubernetes.cri-o.userns-mode" for configuring a user namespace for the pod.
#   "io.kubernetes.cri-o.cgroup2-mount-hierarchy-rw" for mounting cgroups writably when set to "true".
#   "io.kubernetes.cri-o.Devices" for configuring devices for the pod.
#   "io.kubernetes.cri-o.ShmSize" for configuring the size of /dev/shm.
#   "io.kubernetes.cri-o.UnifiedCgroup.$CTR_NAME" for configuring the cgroup v2 unified block for a container.
#   "io.containers.trace-syscall" for tracing syscalls via the OCI seccomp BPF hook.
#   "io.kubernetes.cri.rdt-class" for setting the RDT class of a container
# - monitor_path (optional, string): The path of the monitor binary. Replaces
#   deprecated option "conmon".
# - monitor_cgroup (optional, string): The cgroup the container monitor process will be put in.
#   Replaces deprecated option "conmon_cgroup".
# - monitor_exec_cgroup (optional, string): If set to "container", indicates exec probes
#   should be moved to the container's cgroup
# - monitor_env (optional, array of strings): Environment variables to pass to the montior.
#   Replaces deprecated option "conmon_env".
# - platform_runtime_paths (optional, map): A mapping of platforms to the corresponding
#   runtime executable paths for the runtime handler.
#
# Using the seccomp notifier feature:
#
# This feature can help you to debug seccomp related issues, for example if
# blocked syscalls (permission denied errors) have negative impact on the workload.
#
# To be able to use this feature, configure a runtime which has the annotation
# "io.kubernetes.cri-o.seccompNotifierAction" in the allowed_annotations array.
#
# It also requires at least runc 1.1.0 or crun 0.19 which support the notifier
# feature.
#
# If everything is setup, CRI-O will modify chosen seccomp profiles for
# containers if the annotation "io.kubernetes.cri-o.seccompNotifierAction" is
# set on the Pod sandbox. CRI-O will then get notified if a container is using
# a blocked syscall and then terminate the workload after a timeout of 5
# seconds if the value of "io.kubernetes.cri-o.seccompNotifierAction=stop".
#
# This also means that multiple syscalls can be captured during that period,
# while the timeout will get reset once a new syscall has been discovered.
#
# This also means that the Pods "restartPolicy" has to be set to "Never",
# otherwise the kubelet will restart the container immediately.
#
# Please be aware that CRI-O is not able to get notified if a syscall gets
# blocked based on the seccomp defaultAction, which is a general runtime
# limitation.


# [crio.runtime.runtimes.runc]
# runtime_path = ""
# runtime_type = "oci"
# runtime_root = "/run/runc"
# runtime_config_path = ""
# monitor_path = ""
# monitor_cgroup = "system.slice"
# monitor_exec_cgroup = ""
# monitor_env = [
#       "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin",
# ]
# allowed_annotations = [
#       "io.containers.trace-syscall",
#       "io.kubernetes.cri-o.Devices",
# ]
# privileged_without_host_devices = false


# The workloads table defines ways to customize containers with different resources
# that work based on annotations, rather than the CRI.
# Note, the behavior of this table is EXPERIMENTAL and may change at any time.
# Each workload, has a name, activation_annotation, annotation_prefix and set of resources it supports mutating.
# The currently supported resources are "cpu" (to configure the cpu shares) and "cpuset" to configure the cpuset.
# Each resource can have a default value specified, or be empty.
# For a container to opt-into this workload, the pod should be configured with the annotation $activation_annotation (key only, value is ignored).
# To customize per-container, an annotation of the form $annotation_prefix.$resource/$ctrName = "value" can be specified
# signifying for that resource type to override the default value.
# If the annotation_prefix is not present, every container in the pod will be given the default values.
# Example:
# [crio.runtime.workloads.workload-type]
# activation_annotation = "io.crio/workload"
# annotation_prefix = "io.crio.workload-type"
# [crio.runtime.workloads.workload-type.resources]
# cpuset = 0
# cpushares = "0-1"
# Where:
# The workload name is workload-type.
# To specify, the pod must have the "io.crio.workload" annotation (this is a precise string match).
# This workload supports setting cpuset and cpu resources.
# annotation_prefix is used to customize the different resources.
# To configure the cpu shares a container gets in the example above, the pod would have to have the following annotation:
# "io.crio.workload-type/$container_name = {"cpushares": "value"}"

# hostnetwork_disable_selinux determines whether
# SELinux should be disabled within a pod when it is running in the host network namespace
# Default value is set to true
# hostnetwork_disable_selinux = true

# disable_hostport_mapping determines whether to enable/disable
# the container hostport mapping in CRI-O.
# Default value is set to 'false'
# disable_hostport_mapping = false

# The crio.image table contains settings pertaining to the management of OCI images.
#
# CRI-O reads its configured registries defaults from the system wide
# containers-registries.conf(5) located in /etc/containers/registries.conf. If
# you want to modify just CRI-O, you can change the registries configuration in
# this file. Otherwise, leave insecure_registries and registries commented out to
# use the system's defaults from /etc/containers/registries.conf.
[crio.image]

# Default transport for pulling images from a remote container storage.
# default_transport = "docker://"

# The path to a file containing credentials necessary for pulling images from
# secure registries. The file is similar to that of /var/lib/kubelet/config.json
# global_auth_file = ""

# The image used to instantiate infra containers.
# This option supports live configuration reload.
# pause_image = "registry.k8s.io/pause:3.9"

# The path to a file containing credentials specific for pulling the pause_image from
# above. The file is similar to that of /var/lib/kubelet/config.json
# This option supports live configuration reload.
# pause_image_auth_file = ""

# The command to run to have a container stay in the paused state.
# When explicitly set to "", it will fallback to the entrypoint and command
# specified in the pause image. When commented out, it will fallback to the
# default: "/pause". This option supports live configuration reload.
# pause_command = "/pause"

# List of images to be excluded from the kubelet's garbage collection.
# It allows specifying image names using either exact, glob, or keyword
# patterns. Exact matches must match the entire name, glob matches can
# have a wildcard * at the end, and keyword matches can have wildcards
# on both ends. By default, this list includes the "pause" image if
# configured by the user, which is used as a placeholder in Kubernetes pods.
# pinned_images = [
# ]

# Path to the file which decides what sort of policy we use when deciding
# whether or not to trust an image that we've pulled. It is not recommended that
# this option be used, as the default behavior of using the system-wide default
# policy (i.e., /etc/containers/policy.json) is most often preferred. Please
# refer to containers-policy.json(5) for more details.
# signature_policy = ""

# Root path for pod namespace-separated signature policies.
# The final policy to be used on image pull will be <SIGNATURE_POLICY_DIR>/<NAMESPACE>.json.
# If no pod namespace is being provided on image pull (via the sandbox config),
# or the concatenated path is non existent, then the signature_policy or system
# wide policy will be used as fallback. Must be an absolute path.
# signature_policy_dir = "/etc/crio/policies"

# List of registries to skip TLS verification for pulling images. Please
# consider configuring the registries via /etc/containers/registries.conf before
# changing them here.
# insecure_registries = [
# ]

# Controls how image volumes are handled. The valid values are mkdir, bind and
# ignore; the latter will ignore volumes entirely.
# image_volumes = "mkdir"

# Temporary directory to use for storing big files
# big_files_temporary_dir = ""

# The crio.network table containers settings pertaining to the management of
# CNI plugins.
[crio.network]

# The default CNI network name to be selected. If not set or "", then
# CRI-O will pick-up the first one found in network_dir.
# cni_default_network = ""

# Path to the directory where CNI configuration files are located.
# network_dir = "/etc/cni/net.d/"

# Paths to directories where CNI plugin binaries are located.
# plugin_dirs = [
#       "/opt/cni/bin/",
# ]

# A necessary configuration for Prometheus based metrics retrieval
[crio.metrics]

# Globally enable or disable metrics support.
# enable_metrics = false

# Specify enabled metrics collectors.
# Per default all metrics are enabled.
# It is possible, to prefix the metrics with "container_runtime_" and "crio_".
# For example, the metrics collector "operations" would be treated in the same
# way as "crio_operations" and "container_runtime_crio_operations".
# metrics_collectors = [
#       "operations",
#       "operations_latency_microseconds_total",
#       "operations_latency_microseconds",
#       "operations_errors",
#       "image_pulls_by_digest",
#       "image_pulls_by_name",
#       "image_pulls_by_name_skipped",
#       "image_pulls_failures",
#       "image_pulls_successes",
#       "image_pulls_layer_size",
#       "image_layer_reuse",
#       "containers_events_dropped_total",
#       "containers_oom_total",
#       "containers_oom",
#       "processes_defunct",
#       "operations_total",
#       "operations_latency_seconds",
#       "operations_latency_seconds_total",
#       "operations_errors_total",
#       "image_pulls_bytes_total",
#       "image_pulls_skipped_bytes_total",
#       "image_pulls_failure_total",
#       "image_pulls_success_total",
#       "image_layer_reuse_total",
#       "containers_oom_count_total",
#       "containers_seccomp_notifier_count_total",
#       "resources_stalled_at_stage",
# ]
# The hostname or ip on which the metrics server will listen.
# metrics_host = ""

# The port on which the metrics server will listen.
# metrics_port = 9090

# Local socket path to bind the metrics server to
# metrics_socket = ""

# The certificate for the secure metrics server.
# If the certificate is not available on disk, then CRI-O will generate a
# self-signed one. CRI-O also watches for changes of this path and reloads the
# certificate on any modification event.
# metrics_cert = ""

# The certificate key for the secure metrics server.
# Behaves in the same way as the metrics_cert.
# metrics_key = ""

# A necessary configuration for OpenTelemetry trace data exporting
[crio.tracing]

# Globally enable or disable exporting OpenTelemetry traces.
# enable_tracing = false

# Address on which the gRPC trace collector listens on.
# tracing_endpoint = "0.0.0.0:4317"

# Number of samples to collect per million spans. Set to 1000000 to always sample.
# tracing_sampling_rate_per_million = 0

# CRI-O NRI configuration.
[crio.nri]

# Globally enable or disable NRI.
# enable_nri = false

# NRI socket to listen on.
# nri_listen = "/var/run/nri/nri.sock"

# NRI plugin directory to use.
# nri_plugin_dir = "/opt/nri/plugins"

# NRI plugin configuration directory to use.
# nri_plugin_config_dir = "/etc/nri/conf.d"

# Disable connections from externally launched NRI plugins.
# nri_disable_connections = false

# Timeout for a plugin to register itself with NRI.
# nri_plugin_registration_timeout = "5s"

# Timeout for a plugin to handle an NRI request.
# nri_plugin_request_timeout = "2s"

# Necessary information pertaining to container and pod stats reporting.
[crio.stats]

# The number of seconds between collecting pod and container stats.
# If set to 0, the stats are collected on-demand instead.
# stats_collection_period = 0

root@minikube:/etc/crio# vi crio.conf
root@minikube:/etc/crio# ls          
crio.conf  crio.conf.d  policies
root@minikube:/etc/crio# cd crio.conf.d 
root@minikube:/etc/crio/crio.conf.d# ls
01-crio-runc.conf  02-crio.conf
root@minikube:/etc/crio/crio.conf.d# vi 02-crio.conf 
root@minikube:/etc/crio/crio.conf.d# sudo systemctl restart crio
root@minikube:/etc/crio/crio.conf.d# sudo systemctl status crio
● crio.service - Container Runtime Interface for OCI (CRI-O)
     Loaded: loaded (/lib/systemd/system/crio.service; disabled; vendor preset: enabled)
     Active: active (running) since Tue 2024-10-01 14:56:50 UTC; 45s ago
       Docs: https://github.com/cri-o/cri-o
   Main PID: 8285 (crio)
      Tasks: 36
     Memory: 33.9M
        CPU: 2.541s
     CGroup: /system.slice/crio.service
             ├─8285 /usr/bin/crio
             ├─8440 /usr/bin/conmon -b /run/containers/storage/overlay-containers/952867b08714af84dfdac1dc656f42928ea52b7a73625bc789f901ae71b1d419/userdata -c 952867b08714af84dfdac1dc656f42928ea52b7a73625bc789f901ae71b1d419 -
-exit-dir /var/run/crio/exits -l /var/log/pods/kube-system_kindnet-7n6j8_23684742-2aaf-40ce-bcfb-d78c9e3e8bb2/kindnet-cni/3.log --log-level info -n k8s_kindnet-cni_kindnet-7n6j8_kube-system_23684742-2aaf-40ce-bcfb-d78c9e3e8
bb2_3 -P /run/containers/storage/overlay-containers/952867b08714af84dfdac1dc656f42928ea52b7a73625bc789f901ae71b1d419/userdata/conmon-pidfile -p /run/containers/storage/overlay-containers/952867b08714af84dfdac1dc656f42928ea5
2b7a73625bc789f901ae71b1d419/userdata/pidfile --persist-dir /var/lib/containers/storage/overlay-containers/952867b08714af84dfdac1dc656f42928ea52b7a73625bc789f901ae71b1d419/userdata -r /usr/lib/cri-o-runc/sbin/runc --runtime
-arg --root=/run/runc --socket-dir-path /var/run/crio --syslog -u 952867b08714af84dfdac1dc656f42928ea52b7a73625bc789f901ae71b1d419
             ├─8448 /usr/bin/conmon -b /run/containers/storage/overlay-containers/514ec4e301c4439fad67821ce5c799fa9ca05f4bede97a25d4a94e33c358dbed/userdata -c 514ec4e301c4439fad67821ce5c799fa9ca05f4bede97a25d4a94e33c358dbed -
-exit-dir /var/run/crio/exits -l /var/log/pods/kube-system_kube-scheduler-minikube_e039200acb850c82bb901653cc38ff6e/kube-scheduler/3.log --log-level info -n k8s_kube-scheduler_kube-scheduler-minikube_kube-system_e039200acb8
50c82bb901653cc38ff6e_3 -P /run/containers/storage/overlay-containers/514ec4e301c4439fad67821ce5c799fa9ca05f4bede97a25d4a94e33c358dbed/userdata/conmon-pidfile -p /run/containers/storage/overlay-containers/514ec4e301c4439fad
67821ce5c799fa9ca05f4bede97a25d4a94e33c358dbed/userdata/pidfile --persist-dir /var/lib/containers/storage/overlay-containers/514ec4e301c4439fad67821ce5c799fa9ca05f4bede97a25d4a94e33c358dbed/userdata -r /usr/lib/cri-o-runc/s
bin/runc --runtime-arg --root=/run/runc --socket-dir-path /var/run/crio --syslog -u 514ec4e301c4439fad67821ce5c799fa9ca05f4bede97a25d4a94e33c358dbed
             ├─8487 /usr/bin/conmon -b /run/containers/storage/overlay-containers/91abe426086b751a0adb84765ea5318f72e2b8f3881f34549e1ec259f57cccbc/userdata -c 91abe426086b751a0adb84765ea5318f72e2b8f3881f34549e1ec259f57cccbc -
-exit-dir /var/run/crio/exits -l /var/log/pods/kube-system_kube-controller-manager-minikube_40f5f661ab65f2e4bfe41ac2993c01de/kube-controller-manager/3.log --log-level info -n k8s_kube-controller-manager_kube-controller-mana
ger-minikube_kube-system_40f5f661ab65f2e4bfe41ac2993c01de_3 -P /run/containers/storage/overlay-containers/91abe426086b751a0adb84765ea5318f72e2b8f3881f34549e1ec259f57cccbc/userdata/conmon-pidfile -p /run/containers/storage/o
verlay-containers/91abe426086b751a0adb84765ea5318f72e2b8f3881f34549e1ec259f57cccbc/userdata/pidfile --persist-dir /var/lib/containers/storage/overlay-containers/91abe426086b751a0adb84765ea5318f72e2b8f3881f34549e1ec259f57ccc
bc/userdata -r /usr/lib/cri-o-runc/sbin/runc --runtime-arg --root=/run/runc --socket-dir-path /var/run/crio --syslog -u 91abe426086b751a0adb84765ea5318f72e2b8f3881f34549e1ec259f57cccbc
             ├─8504 /usr/bin/conmon -b /run/containers/storage/overlay-containers/836c219564bc7c356a4bbf5a28b2d373641ec60009df3af40416ef4c18d616a4/userdata -c 836c219564bc7c356a4bbf5a28b2d373641ec60009df3af40416ef4c18d616a4 -
-exit-dir /var/run/crio/exits -l /var/log/pods/kube-system_kube-apiserver-minikube_9e315b3a91fa9f6f7463439d9dac1a56/kube-apiserver/3.log --log-level info -n k8s_kube-apiserver_kube-apiserver-minikube_kube-system_9e315b3a91f
a9f6f7463439d9dac1a56_3 -P /run/containers/storage/overlay-containers/836c219564bc7c356a4bbf5a28b2d373641ec60009df3af40416ef4c18d616a4/userdata/conmon-pidfile -p /run/containers/storage/overlay-containers/836c219564bc7c356a
4bbf5a28b2d373641ec60009df3af40416ef4c18d616a4/userdata/pidfile --persist-dir /var/lib/containers/storage/overlay-containers/836c219564bc7c356a4bbf5a28b2d373641ec60009df3af40416ef4c18d616a4/userdata -r /usr/lib/cri-o-runc/s
bin/runc --runtime-arg --root=/run/runc --socket-dir-path /var/run/crio --syslog -u 836c219564bc7c356a4bbf5a28b2d373641ec60009df3af40416ef4c18d616a4
             ├─8508 /usr/bin/conmon -b /run/containers/storage/overlay-containers/bb08cbfae26553bd939a69cf7d84cceab75a819381af79e8f91c28cf5813daf8/userdata -c bb08cbfae26553bd939a69cf7d84cceab75a819381af79e8f91c28cf5813daf8 -
-exit-dir /var/run/crio/exits -l /var/log/pods/kube-system_coredns-6f6b679f8f-nnkxp_601e3ad7-bd0e-4fe4-b497-55649738f058/coredns/3.log --log-level info -n k8s_coredns_coredns-6f6b679f8f-nnkxp_kube-system_601e3ad7-bd0e-4fe4-
b497-55649738f058_3 -P /run/containers/storage/overlay-containers/bb08cbfae26553bd939a69cf7d84cceab75a819381af79e8f91c28cf5813daf8/userdata/conmon-pidfile -p /run/containers/storage/overlay-containers/bb08cbfae26553bd939a69
cf7d84cceab75a819381af79e8f91c28cf5813daf8/userdata/pidfile --persist-dir /var/lib/containers/storage/overlay-containers/bb08cbfae26553bd939a69cf7d84cceab75a819381af79e8f91c28cf5813daf8/userdata -r /usr/lib/cri-o-runc/sbin/
runc --runtime-arg --root=/run/runc --socket-dir-path /var/run/crio --syslog -u bb08cbfae26553bd939a69cf7d84cceab75a819381af79e8f91c28cf5813daf8
             ├─8522 /usr/bin/conmon -b /run/containers/storage/overlay-containers/bf57752fc200e9d531ada64e1d1793ef48300cedfe4e5b838e51dae9952c97fb/userdata -c bf57752fc200e9d531ada64e1d1793ef48300cedfe4e5b838e51dae9952c97fb -
-exit-dir /var/run/crio/exits -l /var/log/pods/kube-system_etcd-minikube_a5363f4f31e043bdae3c93aca4991903/etcd/3.log --log-level info -n k8s_etcd_etcd-minikube_kube-system_a5363f4f31e043bdae3c93aca4991903_3 -P /run/containe
rs/storage/overlay-containers/bf57752fc200e9d531ada64e1d1793ef48300cedfe4e5b838e51dae9952c97fb/userdata/conmon-pidfile -p /run/containers/storage/overlay-containers/bf57752fc200e9d531ada64e1d1793ef48300cedfe4e5b838e51dae995
2c97fb/userdata/pidfile --persist-dir /var/lib/containers/storage/overlay-containers/bf57752fc200e9d531ada64e1d1793ef48300cedfe4e5b838e51dae9952c97fb/userdata -r /usr/lib/cri-o-runc/sbin/runc --runtime-arg --root=/run/runc 
--socket-dir-path /var/run/crio --syslog -u bf57752fc200e9d531ada64e1d1793ef48300cedfe4e5b838e51dae9952c97fb
             ├─8562 /usr/bin/conmon -b /run/containers/storage/overlay-containers/22be0b68bc30d6921eec8434bac0c95b15b74857884efb8d503fe501793a9c0d/userdata -c 22be0b68bc30d6921eec8434bac0c95b15b74857884efb8d503fe501793a9c0d -
-exit-dir /var/run/crio/exits -l /var/log/pods/kube-system_kube-proxy-kftdr_dd8d496f-ef93-408d-b959-7e5e289c4219/kube-proxy/3.log --log-level info -n k8s_kube-proxy_kube-proxy-kftdr_kube-system_dd8d496f-ef93-408d-b959-7e5e2
89c4219_3 -P /run/containers/storage/overlay-containers/22be0b68bc30d6921eec8434bac0c95b15b74857884efb8d503fe501793a9c0d/userdata/conmon-pidfile -p /run/containers/storage/overlay-containers/22be0b68bc30d6921eec8434bac0c95b
15b74857884efb8d503fe501793a9c0d/userdata/pidfile --persist-dir /var/lib/containers/storage/overlay-containers/22be0b68bc30d6921eec8434bac0c95b15b74857884efb8d503fe501793a9c0d/userdata -r /usr/lib/cri-o-runc/sbin/runc --run
time-arg --root=/run/runc --socket-dir-path /var/run/crio --syslog -u 22be0b68bc30d6921eec8434bac0c95b15b74857884efb8d503fe501793a9c0d
             ├─8778 /usr/bin/conmon -b /run/containers/storage/overlay-containers/be5056c9b9639b6743d2f31b071fdab592f87c457af5abbc063707376e9c3e88/userdata -c be5056c9b9639b6743d2f31b071fdab592f87c457af5abbc063707376e9c3e88 -
-exit-dir /var/run/crio/exits -l /var/log/pods/default_redis-p_786c3f87-560b-4d7a-b346-fd663c301a54/redis-c/2.log --log-level info -n k8s_redis-c_redis-p_default_786c3f87-560b-4d7a-b346-fd663c301a54_2 -P /run/containers/sto
--More--
root@minikube:/etc/crio/crio.conf.d# cat /etc/criu/runc.conf
cat: /etc/criu/runc.conf: No such file or directory
root@minikube:/etc/crio/crio.conf.d# cat /etc/criu/runc.conf 
cat: /etc/criu/runc.conf: No such file or directory
root@minikube:/etc/crio/crio.conf.d# cd /etc/cr
crictl.yaml  crio/        cron.d/      cron.daily/  
root@minikube:/etc/crio/crio.conf.d# cd /etc/cr
crictl.yaml  crio/        cron.d/      cron.daily/  
root@minikube:/etc/crio/crio.conf.d# cd /etc/crmount | grep cgroup
bash: cd: /etc/crmount: No such file or directory
root@minikube:/etc/crio/crio.conf.d# mount | grep cgroup
cgroup on /sys/fs/cgroup type cgroup2 (rw,nosuid,nodev,noexec,relatime)
root@minikube:/etc/crio/crio.conf.d# cat /proc/filesystems | grep cgroup2
nodev   cgroup2
root@minikube:/etc/crio/crio.conf.d# systemctl --version
systemd 249 (249.11-0ubuntu3.12)
+PAM +AUDIT +SELINUX +APPARMOR +IMA +SMACK +SECCOMP +GCRYPT +GNUTLS +OPENSSL +ACL +BLKID +CURL +ELFUTILS +FIDO2 +IDN2 -IDN +IPTC +KMOD +LIBCRYPTSETUP +LIBFDISK +PCRE2 -PWQUALITY -P11KIT -QRENCODE +BZIP2 +LZ4 +XZ +ZLIB +ZSTD -XKBCOMMON +UTMP +SYSVINIT default-hierarchy=unified
root@minikube:/etc/crio/crio.conf.d# cd /etc/criu/runc.conf
bash: cd: /etc/criu/runc.conf: No such file or directory
root@minikube:/etc/crio/crio.conf.d# cd /etc/
root@minikube:/etc# mkdir cr
crictl.yaml  crio/        cron.d/      cron.daily/  
root@minikube:/etc# mkdir criu
root@minikube:/etc# cd cri
crictl.yaml  crio/        criu/        
root@minikube:/etc# cd criu
root@minikube:/etc/criu# touch runc.conf
root@minikube:/etc/criu# vi runc.conf 
root@minikube:/etc/criu# sudo criu dump -t 1388 -D /tmp/checkpoint/ -j -o dump.log
root@minikube:/etc/criu# cd /tmp/checkpoint/
root@minikube:/tmp/checkpoint# ls
dump.log
root@minikube:/tmp/checkpoint# cat dump.log 
Warn  (compel/src/lib/infect.c:133): Unable to interrupt task: 1388 (No such process)
Error (compel/src/lib/infect.c:418): Unable to detach from 1388: No such process
Error (criu/cr-dump.c:2098): Dumping FAILED.
root@minikube:/tmp/checkpoint# ps aux | grep redis
root        8778  0.0  0.0  82740  2712 ?        Ssl  14:56   0:00 /usr/bin/conmon -b /run/containers/storage/overlay-containers/be5056c9b9639b6743d2f31b071fdab592f87c457af5abbc063707376e9c3e88/userdata -c be5056c9b9639b6743d2f31b071fdab592f87c457af5abbc063707376e9c3e88 --exit-dir /var/run/crio/exits -l /var/log/pods/default_redis-p_786c3f87-560b-4d7a-b346-fd663c301a54/redis-c/2.log --log-level info -n k8s_redis-c_redis-p_default_786c3f87-560b-4d7a-b346-fd663c301a54_2 -P /run/containers/storage/overlay-containers/be5056c9b9639b6743d2f31b071fdab592f87c457af5abbc063707376e9c3e88/userdata/conmon-pidfile -p /run/containers/storage/overlay-containers/be5056c9b9639b6743d2f31b071fdab592f87c457af5abbc063707376e9c3e88/userdata/pidfile --persist-dir /var/lib/containers/storage/overlay-containers/be5056c9b9639b6743d2f31b071fdab592f87c457af5abbc063707376e9c3e88/userdata -r /usr/lib/cri-o-runc/sbin/runc --runtime-arg --root=/run/runc --socket-dir-path /var/run/crio --syslog -u be5056c9b9639b6743d2f31b071fdab592f87c457af5abbc063707376e9c3e88
999         8793  0.2  0.3 133632 15076 ?        Ssl  14:56   0:01 redis-server *:6379
root        9165  0.0  0.0   3472  2032 pts/3    S+   15:03   0:00 grep --color=auto redis
root@minikube:/tmp/checkpoint# sudo criu dump -t 8793 -D /tmp/checkpoint/ -j -o dump.log
root@minikube:/tmp/checkpoint# ls
dump.log
root@minikube:/tmp/checkpoint# cd dump.log 
bash: cd: dump.log: Not a directory
root@minikube:/tmp/checkpoint# cat dump.log 
Error (criu/mount.c:1088): mnt: Mount 636 ./etc/hostname (master_id: 40 shared_id: 0) has unreachable sharing. Try --enable-external-masters.
Error (criu/cr-dump.c:2098): Dumping FAILED.
root@minikube:/tmp/checkpoint# sudo criu dump -t 8793 -D /tmp/checkpoint/ -j -o dump.log --enable-external-masters
root@minikube:/tmp/checkpoint# cat dump.log 
Error (criu/mount.c:1088): mnt: Mount 636 ./etc/hostname (master_id: 40 shared_id: 0) has unreachable sharing. Try --enable-external-masters.
Error (criu/cr-dump.c:2098): Dumping FAILED.
root@minikube:/tmp/checkpoint# kubectl run simple-test --image=busybox --restart=Never -- sleep 10000
bash: kubectl: command not found
root@minikube:/tmp/checkpoint# sudo criu dump -t 8793 -D /tmp/checkpoint/ -j -o dump.log --enable-external-masters --external mount[./run/.containerenv]
root@minikube:/tmp/checkpoint# cat dump.log 
Error (criu/mount.c:1088): mnt: Mount 636 ./etc/hostname (master_id: 40 shared_id: 0) has unreachable sharing. Try --enable-external-masters.
Error (criu/cr-dump.c:2098): Dumping FAILED.
root@minikube:/tmp/checkpoint# cd /
root@minikube:/# cd var/ 
root@minikube:/var# ls
backups  cache  data  hostpath-provisioner  hostpath_pv  lib  local  lock  log  mail  opt  run  spool  tmp
root@minikube:/var# cd lib/
root@minikube:/var/lib# ls
PackageKit  apt  cni  containerd  containers  crio  dbus  docker  dpkg  kubelet  minikube  misc  nfs  pam  polkit-1  private  python  shells.state  sudo  systemd  ucf  unattended-upgrades  vim
root@minikube:/var/lib# cd kubelet/
root@minikube:/var/lib/kubelet# ls
checkpoints  config.yaml  cpu_manager_state  device-plugins  kubeadm-flags.env  memory_manager_state  pki  plugins  plugins_registry  pod-resources  pods
root@minikube:/var/lib/kubelet# cd checkpoints/
root@minikube:/var/lib/kubelet/checkpoints# ls
root@minikube:/var/lib/kubelet/checkpoints# cd /home
root@minikube:/home# ls
docker  kubelet-client-csr.conf  kubelet-client.crt  kubelet-client.csr  kubelet-client.key
root@minikube:/home# curl -X -k POST "https://localhost:10250/checkpoint/default/redis-p/redis-c" \
--insecure --cert /home/kubelet-client.crt --key /home/kubelet-client.key
curl: (6) Could not resolve host: POST
root@minikube:/home# curl -X POST "https://localhost:10250/checkpoint/default/redis-p/redis-c" \e# curl -X POST "https://localhost:10250/checkpoint/default/redis-p/redis-c" \
--insecure --cert /home/kubelet-client.crt --key /home/kubelet-client.key
{"items":["/var/lib/kubelet/checkpoints/checkpoint-redis-p_default-redis-c-2024-10-01T15:10:03Z.tar"]}root@minikube:/home# cd /var/lib/kubelet/
root@minikube:/var/lib/kubelet# ls
checkpoints  config.yaml  cpu_manager_state  device-plugins  kubeadm-flags.env  memory_manager_state  pki  plugins  plugins_registry  pod-resources  pods
root@minikube:/var/lib/kubelet# cd checkpoints/
root@minikube:/var/lib/kubelet/checkpoints# ls
checkpoint-redis-p_default-redis-c-2024-10-01T15:10:03Z.tar
root@minikube:/var/lib/kubelet/checkpoints# 